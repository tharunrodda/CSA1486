#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 50

typedef struct {
    char op;
    char arg1[MAX_SIZE];
    char arg2[MAX_SIZE];
    char result[MAX_SIZE];
} ThreeAddressCode;

ThreeAddressCode code[MAX_SIZE];
int codeIndex = 0;

void generateCode(char op, char arg1[MAX_SIZE], char arg2[MAX_SIZE], char result[MAX_SIZE]) {
    code[codeIndex].op = op;
    strcpy(code[codeIndex].arg1, arg1);
    strcpy(code[codeIndex].arg2, arg2);
    strcpy(code[codeIndex].result, result);
    codeIndex++;
}

void displayCode() {
    printf("\nGenerated Three-Address Code:\n");
    for (int i = 0; i < codeIndex; i++) {
        printf("%s = %s %c %s\n", code[i].result, code[i].arg1, code[i].op, code[i].arg2);
    }
}

int main() {
    char expression[MAX_SIZE];
    printf("Enter an arithmetic expression: ");
    fgets(expression, sizeof(expression), stdin);

    char temp[MAX_SIZE];
    int tempIndex = 0;
    int i = 0;

    while (expression[i] != '\0') {
        if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*' || expression[i] == '/') {
            generateCode(expression[i], temp, "", temp);
            strcpy(temp, temp + 2); // Shift the contents of temp to remove the result from previous code
            tempIndex = 1;
        } else if (expression[i] == ' ') {
            temp[tempIndex] = '\0'; // Add null terminator to form a complete string
            tempIndex = 0;
        } else {
            temp[tempIndex++] = expression[i];
        }
        i++;
    }

    generateCode('=', temp, "", "result");

    displayCode();

    return 0;
}
